// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// AdAccount model
model AdAccount {
  id                           String    @id @default(auto()) @map("_id") @db.ObjectId
  adAccountId                  String    @unique @map("adAccountId")
  userId                       String    @db.ObjectId
  test                         Boolean?
  totalBudgetCurrencyCode      String?
  totalBudgetAmount            Float?
  notifiedOnCreativeRejection  Boolean
  notifiedOnNewFeaturesEnabled Boolean
  notifiedOnEndOfCampaign      Boolean
  servingStatuses              String[]
  type                         String
  versionTag                   String?
  reference                    String
  notifiedOnCreativeApproval   Boolean
  createdAt                    DateTime  @default(now())
  createdActor                 String
  lastModifiedAt               DateTime  @updatedAt
  lastModifiedActor            String
  name                         String
  currency                     String
  status                       String
  totalBudgetEndsAt            DateTime?

  user User @relation("UserAdAccounts", fields: [userId], references: [id], onDelete: Cascade)
}

// User model
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts      Account[]          @relation("UserAccounts")
  adAccounts    AdAccount[]        @relation("UserAdAccounts")
  organizations Organization[]  @relation("UserOrganizations")
}

// Account model
model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  user User @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Organization model
model Organization {
  id                      String     @id @default(auto()) @map("_id") @db.ObjectId
  organizationId          String     @unique               // Unique organizationId field
  localizedName           String?
  name                    Json
  primaryOrganizationType String?
  foundedYear             Int?       // Year the organization was founded
  headquarters            String?    // Headquarters location
  websiteUrl              String?    // Website URL
  employeeCountRange      Int?       // Range of employee count
  specialties             String[]    // List of specialties
  industries             String[]    // List of industries
//  locations               Location[]
  localizedWebsite        String?
//  logoV2                  Logo?      @relation("OrganizationLogo", fields: [logoV2Id], references: [id]) // Unique relation name
  logoV2Id                String?    @db.ObjectId
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  lastModifiedAt          DateTime?  @updatedAt             // Ensure this field is defined here
  userId                  String @db.ObjectId      // New userId field

  user User @relation("UserOrganizations", fields: [userId], references: [id], onDelete: Cascade)
}